(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{223:function(e,r,t){"use strict";t.r(r);var n=t(0),o=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"docker入门篇-部署静态页面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker入门篇-部署静态页面"}},[e._v("#")]),e._v(" docker入门篇-部署静态页面")]),e._v(" "),t("h3",{attrs:{id:"什么是docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是docker"}},[e._v("#")]),e._v(" 什么是docker")]),e._v(" "),t("blockquote",[t("p",[e._v("Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动开放容器联盟（OCI）。")])]),e._v(" "),t("blockquote",[t("p",[e._v("Docker 使用 Google 公司的 Go 语言 开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它隔离的进程，因此称其为容器。最初实现是基于 LXC，从 0.7 版本后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，进一步演进使用 runC 和 containerd。")])]),e._v(" "),t("blockquote",[t("p",[e._v("Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。")])]),e._v(" "),t("h3",{attrs:{id:"docker与前端应用的结合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker与前端应用的结合"}},[e._v("#")]),e._v(" docker与前端应用的结合")]),e._v(" "),t("p",[e._v("前端应用使用docker可以带来哪些优势呢？")]),e._v(" "),t("ol",[t("li",[e._v("环境一致性")])]),e._v(" "),t("p",[e._v("比如前端应用需要部署在多台虚拟机上，那么配置多台虚拟机就需要人为操作，增加修改配置，比如node版本升级，都需要一台一台进行，十分浪费时间，而且容易出错。但是使用docker技术，只需要配置一份镜像就可以，十分方便。")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("方便迁移")])]),e._v(" "),t("p",[e._v("Docker 确保了运行环境的一致性，使得应用的迁移更加容易。可以很轻易将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行。比如接到任务说下周要加一个分区，或者客户要求部署私有云，可以很放心的说镜像拿走，而不用担心环境问题。")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("快速部署、回滚")])]),e._v(" "),t("p",[e._v("得益于 Docker 使用的分层存储和镜像技术，使得扩展镜像变得非常简单。可以预先把程序需要的依赖，静态资源等在构建过程中添加到镜像，在需要的时候启动该容器实现快速部署、回滚、止血。比如当出现线上事故需要回滚时，传统做法是触发某些自动化工具去拉代码装依赖打包最后部署，一旦某个环节出了问题，譬如网络被墙了导致依赖拉不下来，构建失败等等，将会导致更验证的问题。")]),e._v(" "),t("h3",{attrs:{id:"docker安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[e._v("#")]),e._v(" docker安装")]),e._v(" "),t("p",[t("code",[e._v("macOS")])]),e._v(" "),t("p",[t("code",[e._v("brew cask install docker")])]),e._v(" "),t("p",[e._v("安装好之后，会出现在mac的应用中，打开docker应用，遇到下载慢的问题可以把homebrew包地址修改为国内镜像（中科大镜像等）")]),e._v(" "),t("p",[e._v("其他系统安装 https://yeasy.gitbooks.io/docker_practice/install/")]),e._v(" "),t("h3",{attrs:{id:"使用docker部署前端应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用docker部署前端应用"}},[e._v("#")]),e._v(" 使用docker部署前端应用")]),e._v(" "),t("p",[e._v("####打包前端出dist")]),e._v(" "),t("p",[e._v("vue小项目举例，使用官方cli3快速生成项目")]),e._v(" "),t("p",[t("code",[e._v("vue create docker-vue")])]),e._v(" "),t("p",[e._v("这里使用yarn打包和启动项目，")]),e._v(" "),t("p",[t("code",[e._v("cd docker-vue")])]),e._v(" "),t("p",[t("code",[e._v("yarn run build")])]),e._v(" "),t("p",[e._v("打包出dist文件夹，方便一会打包进docker镜像")]),e._v(" "),t("h4",{attrs:{id:"制作docker镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#制作docker镜像"}},[e._v("#")]),e._v(" 制作docker镜像")]),e._v(" "),t("p",[e._v("使用docker官方的nginx镜像")]),e._v(" "),t("p",[t("code",[e._v("docker pull nginx:1.14")])]),e._v(" "),t("p",[e._v("查看已安装镜像")]),e._v(" "),t("p",[t("code",[e._v("docker image ls")])]),e._v(" "),t("h4",{attrs:{id:"修改nginx配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改nginx配置文件"}},[e._v("#")]),e._v(" 修改nginx配置文件")]),e._v(" "),t("p",[e._v("在当前目录（docker-vue）下创建nginx配置文件 "),t("code",[e._v("nginx.conf")]),e._v("\n配置文件代码如下：")]),e._v(" "),t("div",{staticClass:"language-conf extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen 80 default_server;\n        server_name _;\n\n        location  / {\n        root /usr/share/nginx/html;\n        index  index.html ;\n        try_files $uri $uri/ /index.html;\n        }\n    }\n\n}\n\n\n\n')])])]),t("h4",{attrs:{id:"dockerfile文件修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile文件修改"}},[e._v("#")]),e._v(" Dockerfile文件修改")]),e._v(" "),t("p",[e._v("在当前目录（docker-vue）下，创建Dockerfile文件，Dockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM nginx:1.14\nLABEL maintainer "dale_na@163.com"\nADD ./dist/ /usr/share/nginx/html\nADD nginx.conf /etc/nginx/\nEXPOSE 80\n\n')])])]),t("h4",{attrs:{id:"构建自定义镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建自定义镜像"}},[e._v("#")]),e._v(" 构建自定义镜像")]),e._v(" "),t("p",[t("code",[e._v("docker build -t dale_docker .")])]),e._v(" "),t("p",[t("code",[e._v("--tag, -t: 镜像的名字及标签")])]),e._v(" "),t("h4",{attrs:{id:"启动自定义镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动自定义镜像"}},[e._v("#")]),e._v(" 启动自定义镜像")]),e._v(" "),t("p",[t("code",[e._v("docker run -d -p 8080:80 dale_docker")])]),e._v(" "),t("p",[t("code",[e._v("-d: 后台运行容器，并返回容器ID")])]),e._v(" "),t("p",[t("code",[e._v("-p: 指定端口映射，格式为：主机(宿主)端口:容器端口")])]),e._v(" "),t("p",[e._v("如果以上配置都操作正确的话，此时打开本地浏览器，输入\nhttp://localhost:8080/ 就会看到刚刚自己新建的vue项目！")]),e._v(" "),t("h4",{attrs:{id:"其他docker排查错误的命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他docker排查错误的命令"}},[e._v("#")]),e._v(" 其他docker排查错误的命令")]),e._v(" "),t("ol",[t("li",[e._v("查看当前所有docker进程 "),t("code",[e._v("docker ps -a")])]),e._v(" "),t("li",[e._v("查看容器状态，-f实时刷新 "),t("code",[e._v("docker logs -f 容器id")])]),e._v(" "),t("li",[e._v("删除容器 "),t("code",[e._v("docker container rm 容器id")])])])])}),[],!1,null,null,null);r.default=o.exports}}]);